#!/bin/sh

source /usr/lib/rsb/io.sh

dataDir=${dataDir:-"/usr/share/initramfs/"}
initIn=${initIn:-"$dataDir/init.in"}
outFile=${outFile:-"/boot/initramfs.img"}
kernel_version=$(uname -r)

reqBins="sh bash cat cp dd killall ls mkdir mknod mount \
         umount sed sleep ln rm uname readlink basename \
         udevd udevadm modprobe kmod insmod lsmod blkid \
         switch_root mdadm mdmon losetup touch install"


function copyFile {
    local file

    if [ "$2" == "lib" ] ; then
        file=$(PATH=/usr/lib type -p $1)
    else
        file=$(type -p $1)
    fi

    if [ -n $file ] ; then
        [ ! -d "$wdir"/$2 ] && mkdir -p $wdir/$2
        cp $file $wdir/$2
    else
        err "missing required file: $1 for dir $2"
        rm -rf $wdir
        rm $unsorted
        exit 1
    fi
}

function installModules {
    local modname modpath
    if modinfo -k $kernel_version $1 &>/dev/null ; then
        modname=$(modinfo -k $kernel_version -F name $1)
        modpath=$(modinfo -k $kernel_version -F filename $1)
    else
        err "kernel module missing '$1'"
    fi

    [ -f $wdir/$modpath ] && return
    mkdir -p "$wdir/$(dirname $modpath)"
    cp "$modpath" $wdir/$modpath
    mkdir -p $wdir/lib/firmware
    modinfo -F firmware -k $kernel_version $modname | while read -r line ; do
        if [ ! -f /lib/firmware/$line ] ; then
            echo "missing firmware for $modname: $line"
        else
            if [ ! -d $wdir/lib/firmware/$(dirname $line) ]; then
                mkdir -p $wdir/lib/firmware/$(dirname $line)
            fi
            cp /lib/firmware/$line $wdir/lib/firmware/$line
        fi
    done

    modinfo -F depends -k $kernel_version $modname | while IFS=',' read -r -a line; do
        for l in ${line[@]} ; do
            installModules "$1"
        done
    done
}

function buildHierarchy {
    install -d $wdir/{bin,dev,lib/{firmware,modules},run,sys,proc,usr}
    install -d $wdir/etc/{modprobe.d,udev/rules.d}
    touch $wdir/etc/modprobe.d/modprobe.conf
    ln -s ../lib $wdir/usr/lib
    ln -s ../lib64 $wdir/usr/lib64
    ln -s ../bin $wdir/usr/bin
    ln -s bin $wdir/sbin
    ln -s lib $wdir/lib64
    ln -s ../sbin $wdir/usr/sbin

    # Create necessary device nodes
    mknod -m 640 $wdir/dev/console c 5 1
    mknod -m 664 $wdir/dev/null    c 1 3
}



while [ $# -gt 0 ] ; do
key=$1
case "$key" in

    -k | --kernel)
        kernel_version="${2}"
        outFile="/boot/initramfs.img-$kernel_version"
        shift
        shift
        ;;

    -o | --output)
        outFile="${2}"
        shift
        shift
        ;;

    -i | --initin)
        initIn="${2}"
        shift
        shift
        ;;

    -u | --universal)
        universal=1
        shift
        shift
        ;;

esac
done

if [ ! -d "/lib/modules/$kernel_version" ] ; then
    err "No Modules Directory found for $kernel_version"
    exit 1
fi


wdir=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)
unsorted=$(mktemp /tmp/unsorted.XXXXXXXXXX)


buildHierarchy

# Install udev configurations
[ -f /etc/udev/udev.conf ] && cp /etc/udev/udev.conf $wdir/etc/udev/udev.conf
mkdir -p $wdir/lib/udev/rules.d/
for i in 50-udev-default.rules \
         60-persistent-storage.rules \
         64-btrfs.rules \
         80-drivers.rules ; do
    cp /usr/lib/udev/rules.d/$i $wdir/lib/udev/rules.d/
done

for j in ata_id \
         scsi_id ; do
    cp -r /usr/lib/udev/$j $wdir/lib/udev/
done


# Copying raid configurations file
[ -f /etc/mdadm.conf ] && cp /etc/mdadm.conf $wdir/etc

# Copying init file
install -m0755 $initIn $wdir/init

# Installing binaries
for b in $reqBins ; do 
    loc=`which $b` || echo "failed to add $b (not exist)"
    ldd $(echo $loc) | sed "s/\t//" | cut -d " " -f1 >> $unsorted
    cp $loc $wdir/bin
done


# lvm Symlinks
if [ $with_lvm ] ; then
    for i in lv{change,rename,extend,create,scan} ; do
        ln -s lvm $wdir/bin/$i
    done

    # Copying LVM Configurations
    cp -a /etc/lvm $wdir/etc
fi

# Installing Libraries
sort $unsorted | uniq | while read library ; do
    if [ "$library" == "linux-vdso.so.1" ] ||
       [ "$library" == "linux-gate.so.1" ] ; then
        continue
    fi

    copyFile $library lib
done

if [ -z "$universal" ] ; then

    allReqModules="$(find /lib/modules/${kernel_version}/kernel/{crypto,fs,lib} /lib/modules/${kernel_version}/kernel/drivers/{block,ata,md,firewire} /lib/modules/${kernel_version}/kernel/drivers/{scsi,message,pcmcia,virtio} /lib/modules/${kernel_version}/kernel/drivers/usb/{host,storage} -type f | rev | cut -d '/' -f1 | rev | sed 's|.ko.xz||g')"
    for i in $allReqModules ; do
        for j in $(lsmod  | cut -d ' ' -f1) ; do
            if [ "$i" == "$j" ] ; then
                installModules $i
            fi
        done
    done

else
    # Installing Kernel modules
    for i in $(find    \
        /lib/modules/${kernel_version}/kernel/{crypto,fs,lib} \
        /lib/modules/${kernel_version}/kernel/drivers/{block,ata,md,firewire}  \
        /lib/modules/${kernel_version}/kernel/drivers/{scsi,message,pcmcia,virtio} \
        /lib/modules/${kernel_version}/kernel/drivers/usb/{host,storage}   \
        -type f); do

        mod=$(basename $i | sed 's/.ko.xz//g')
        installModules $mod
    done

    # Extra for iso and squashfs
    for i in  cdrom loop overlay; do
        installModules $i
    done

fi

cp /lib/modules/${kernel_version}/modules.{builtin,order} \
    $wdir/lib/modules/${kernel_version}

depmod -b $wdir $kernel_version

( cd $wdir; find . | cpio -o -H newc --quiet | gzip -9 ) > $outFile

# Remove Temp
rm -rf $wdir $unsorted
success "done"